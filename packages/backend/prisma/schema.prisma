// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource POSTGRES_DATASOURCE {
	provider = "postgresql"
	url = env("DATABASE_URL")
}
generator client {
	provider = "prisma-client-js"
}
model User {
	uuid String @id @default(uuid())
	fullname String 
	email String @unique
	password String 
	userProject UserProject[] @relation(name: "UserToUserProject")
	activationToken String? 
	status String 
	RefreshToken RefreshToken[] @relation(name: "RefreshTokenToUser")
	PasswordResetTokens PasswordResetTokens[] @relation(name: "PasswordResetTokensToUser")
}
model Project {
	uuid String @id @default(uuid())
	createdAt DateTime @default(now())
	name String 
	environments Environment[] @relation(name: "EnvironmentToProject")
	userProject UserProject[] @relation(name: "ProjectToUserProject")
}
model UserProject {
	user User @relation(name: "UserToUserProject", fields: [userId], references: [uuid])
	userId String 
	project Project @relation(name: "ProjectToUserProject", fields: [projectId], references: [uuid])
	projectId String 
	role String 
	@@id([userId, projectId])
}
model Environment {
	uuid String @id @default(uuid())
	name String 
	project Project @relation(name: "EnvironmentToProject", fields: [projectId], references: [uuid])
	projectId String 
	clientKey String @default(uuid())
	flagEnvironment FlagEnvironment[] @relation(name: "EnvironmentToFlagEnvironment")
	ExperimentEnvironment ExperimentEnvironment[] @relation(name: "EnvironmentToExperimentEnvironment")
}
model RefreshToken {
	id Int @id @default(autoincrement())
	user User @relation(name: "RefreshTokenToUser", fields: [userId], references: [uuid])
	userId String 
	expired DateTime 
	value String 
}
model PasswordResetTokens {
	uuid String @id @default(uuid())
	dateEnd DateTime 
	token String 
	user User @relation(name: "PasswordResetTokensToUser", fields: [userUuid], references: [uuid])
	userUuid String 
}
model Flag {
	uuid String @id @default(uuid())
	name String 
	key String 
	description String 
	createdAt DateTime @default(now())
	flagEnvironment FlagEnvironment[] @relation(name: "FlagToFlagEnvironment")
}
model FlagEnvironment {
	flag Flag @relation(name: "FlagToFlagEnvironment", fields: [flagId], references: [uuid])
	flagId String 
	environment Environment @relation(name: "EnvironmentToFlagEnvironment", fields: [environmentId], references: [uuid])
	environmentId String 
	flagHit FlagHit[] @relation(name: "FlagEnvironmentToFlagHit")
	status String @default("NOT_ACTIVATED")
	strategies RolloutStrategy[] @relation(name: "FlagEnvironmentToRolloutStrategy")
	@@id([flagId, environmentId])
}
model FlagHit {
	id Int @id @default(autoincrement())
	date DateTime @default(now())
	flagEnvironment FlagEnvironment @relation(name: "FlagEnvironmentToFlagHit", fields: [flagEnvironmentFlagId,flagEnvironmentEnvironmentId], references: [flagId,environmentId])
	flagEnvironmentFlagId String 
	flagEnvironmentEnvironmentId String 
	status String 
}
model RolloutStrategy {
	uuid String @id @default(uuid())
	name String 
	strategyRuleType String 
	fieldName String? 
	fieldComparator String? 
	fieldValue String? 
	activationType String 
	rolloutPercentage Int? 
	FlagEnvironment FlagEnvironment? @relation(name: "FlagEnvironmentToRolloutStrategy", fields: [flagEnvironmentFlagId,flagEnvironmentEnvironmentId], references: [flagId,environmentId])
	flagEnvironmentFlagId String? 
	flagEnvironmentEnvironmentId String? 
}
model Experiment {
	uuid String @id @default(uuid())
	name String 
	key String 
	description String 
	createdAt DateTime @default(now())
	ExperimentEnvironment ExperimentEnvironment[] @relation(name: "ExperimentToExperimentEnvironment")
	variants Variant[] @relation(name: "ExperimentToVariant")
}
model Variant {
	uuid String @id @default(uuid())
	key String 
	name String 
	description String 
	createdAt DateTime @default(now())
	experimentUuid String? 
	isControl Boolean @default(false)
	Experiment Experiment? @relation(name: "ExperimentToVariant", fields: [experimentUuid], references: [uuid], onDelete: Cascade)
	VariantHit VariantHit[] @relation(name: "VariantToVariantHit")
}
model VariantHit {
	id Int @id @default(autoincrement())
	date DateTime @default(now())
	variant Variant @relation(name: "VariantToVariantHit", fields: [variantUuid], references: [uuid], onDelete: Cascade)
	variantUuid String 
}
model ExperimentEnvironment {
	experiment Experiment @relation(name: "ExperimentToExperimentEnvironment", fields: [experimentId], references: [uuid], onDelete: Cascade)
	experimentId String 
	environment Environment @relation(name: "EnvironmentToExperimentEnvironment", fields: [environmentId], references: [uuid])
	environmentId String 
	status String @default("NOT_ACTIVATED")
	@@id([experimentId, environmentId])
}